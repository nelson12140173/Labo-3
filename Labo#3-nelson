{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d2cdd72a-3182-4107-81a8-7741bdceed32",
   "metadata": {},
   "source": [
    "Ejercicio #1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "47335902-7855-45b2-89eb-a77b3c851c12",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese un número entero en decimal:  4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El número 4 en binario es: 100\n"
     ]
    }
   ],
   "source": [
    "def number_decimal_a_binario(number):\n",
    "    if number >= 0:\n",
    "        binario = bin(number)[2:]\n",
    "    else:\n",
    "        binario = \"-\" + bin(abs(number))[2:]\n",
    "    print(f\"El número {number} en binario es: {binario}\")\n",
    "\n",
    "def main():\n",
    "    try:\n",
    "        numero = int(input(\"Ingrese un número entero en decimal: \"))\n",
    "        number_decimal_a_binario(numero)\n",
    "    except ValueError:\n",
    "        print(\"Error: Ingrese un número entero válido.\")\n",
    "\n",
    "main()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "76e80bf5-24ce-4632-ad97-852f823c92f0",
   "metadata": {},
   "source": [
    "Ejercicio #2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ff16f915-6ffb-458c-bffa-2728acc63354",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese un número entero:  7\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El número 7 es primo.\n"
     ]
    }
   ],
   "source": [
    "def primo(n):\n",
    "    if n <= 1:\n",
    "        return False\n",
    "    for i in range(2, int(n**0.5) + 1):\n",
    "        if n % i == 0:\n",
    "            return False  \n",
    "    return True  \n",
    "\n",
    "number = int(input(\"Ingrese un número entero: \"))\n",
    "if primo(number):\n",
    "    print(f\"El número {number} es primo.\")\n",
    "else:\n",
    "    print(f\"El número {number} no es primo.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1c10456-2f96-4d93-8e41-0d2716ec2cb9",
   "metadata": {},
   "source": [
    "Ejercicio #3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8382d3fc-82de-41d9-bfbc-fc60f0a63114",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese una lista de números separados por espacios o comas:  4,5,6\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La desviación estándar es: 0.8165\n"
     ]
    }
   ],
   "source": [
    "def calcu_media(lista):\n",
    "    suma = 0\n",
    "    for numero in lista:\n",
    "        suma += numero\n",
    "    media = suma / len(lista)\n",
    "    return media\n",
    "\n",
    "\n",
    "def desvia_estandar(lista):\n",
    "    media = calcular_media(lista)\n",
    "    suma_cuadrados = 0\n",
    "    for numero in lista:\n",
    "        suma_cuadrados += (numero - media) ** 2\n",
    "    varianza = suma_cuadrados / len(lista)\n",
    "    desviacion = varianza ** 0.5\n",
    "    return desviacion\n",
    "\n",
    "\n",
    "def result():\n",
    "   \n",
    "    numeros = input(\"Ingrese una lista de números separados por espacios o comas: \")\n",
    "    \n",
    "    lista = list(map(float, numeros.replace(',', ' ').split()))\n",
    "    \n",
    "    resultado = desvia_estandar(lista)\n",
    "    print(f\"La desviación estándar es: {resultado:.4f}\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    result()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "42b19923-8b37-4488-8bab-f9ec3974c871",
   "metadata": {},
   "source": [
    "Ejercicio #4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "597cfc89-7e71-4d09-a467-9a3dec4ed54a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese los elementos del arreglo separelos por espacios:  4 2 18 15\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Arreglo original: [4, 2, 18, 15]\n",
      "Arreglo ordenado: [2, 4, 15, 18]\n"
     ]
    }
   ],
   "source": [
    "def burbuja(arreglo):\n",
    "    \n",
    "    new_arreglo = arreglo.copy()\n",
    "    n = len(new_arreglo)\n",
    "    \n",
    "    for i in range(n):\n",
    "        for j in range(0, n - i - 1):\n",
    "            if new_arreglo[j] > new_arreglo[j + 1]:\n",
    "                # Intercambiar elementos si están en el orden incorrecto\n",
    "                new_arreglo[j], new_arreglo[j + 1] = new_arreglo[j + 1], new_arreglo[j]\n",
    "    return new_arreglo\n",
    "\n",
    "\n",
    "def result():\n",
    "    \n",
    "    elementos = input(\"Ingrese los elementos del arreglo separelos por espacios: \")\n",
    "    \n",
    "    arreglo = list(map(int, elementos.split()))\n",
    "    \n",
    "    arreglo_ordenado = burbuja(arreglo)\n",
    "    \n",
    "    print(\"Arreglo original:\", arreglo)\n",
    "    print(\"Arreglo ordenado:\", arreglo_ordenado)\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    result()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e6d83cb-2927-4ba3-b50c-6100e3307d99",
   "metadata": {},
   "source": [
    "Ejercicio #5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "56864f39-6305-47d1-bd8f-bb6b5ec5419d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese elementos de la tupla separados por comas (ejemplo: 10, 20, 40, 5, 70):  4,5,8,9\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Entrada: (4, 5, 8, 9)\n",
      "Salida: 4589\n"
     ]
    }
   ],
   "source": [
    "def de_tupla_a_string(tupla):\n",
    "   \n",
    "    resultado = ''.join(map(str, tupla))\n",
    "    return resultado\n",
    "\n",
    "\n",
    "entrada = input(\"Ingrese elementos de la tupla separados por comas (ejemplo: 10, 20, 40, 5, 70): \")\n",
    "\n",
    "\n",
    "try:\n",
    "    tupla = tuple(map(int, entrada.split(',')))\n",
    "    \n",
    "    resultado = de_tupla_a_string(tupla)\n",
    "    print(\"Entrada:\", tupla)\n",
    "    print(\"Salida:\", resultado)\n",
    "except ValueError:\n",
    "    print(\"Error: ingrese solo números separados por comas.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed36c737-5efd-460b-bc38-3174532e1231",
   "metadata": {},
   "source": [
    "Ejercicio #6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "af2c9390-90ff-4ce7-8835-a0cce844cbb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese las tuplas separadas por punto y coma (por ejemplo: (),(), ('X',), ('a', 'b'), ('a', 'b', 'c'), ('d',)):  (),(), ('X',), ('a', 'b'), ('a', 'b', 'c'), ('d',)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Lista original: [(), (), ('X',), ('a', 'b'), ('a', 'b', 'c'), ('d',)]\n",
      "Lista sin tuplas vacías: [('X',), ('a', 'b'), ('a', 'b', 'c'), ('d',)]\n"
     ]
    }
   ],
   "source": [
    "def elimi_tuplas_vacias(lista):\n",
    "    \n",
    "    lista_filtrada = [tupla for tupla in lista if tupla]\n",
    "    return lista_filtrada\n",
    "\n",
    "\n",
    "entrada = input(\"Ingrese las tuplas separadas por punto y coma (por ejemplo: (),(), ('X',), ('a', 'b'), ('a', 'b', 'c'), ('d',)): \")\n",
    "\n",
    "\n",
    "try:\n",
    "    lista = eval(\"[\" + entrada + \"]\")\n",
    "    \n",
    "    if all(isinstance(tupla, tuple) for tupla in lista):\n",
    "        lista_filtrada = elimi_tuplas_vacias(lista)\n",
    "        print(\"Lista original:\", lista)\n",
    "        print(\"Lista sin tuplas vacías:\", lista_filtrada)\n",
    "    else:\n",
    "        print(\"Error: ingresa solo tuplas.\")\n",
    "except:\n",
    "    print(\"Error: ingresa solamente el formato correcto.\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1030fc3b-3188-4a4d-834d-53772b81aecd",
   "metadata": {},
   "source": [
    "Ejercicio #7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3c47861a-c146-4c33-a4fe-ebff5270b2e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese una tupla de tuplas con números (ejemplo: ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32))):  ((10, 100, 10, 12), (300, 45, 56, 45), (810, 80, 391, 322))\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Tupla original: ((10, 100, 10, 12), (300, 45, 56, 45), (810, 80, 391, 322))\n",
      "Promedio de cada tupla: (33.0, 111.5, 400.75)\n"
     ]
    }
   ],
   "source": [
    "def calculo_promedios(tuplas):\n",
    "    \n",
    "    promedios = tuple(sum(tupla) / len(tupla) for tupla in tuplas)\n",
    "    return promedios\n",
    "\n",
    "\n",
    "entrada = input(\"Ingrese una tupla de tuplas con números (ejemplo: ((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32))): \")\n",
    "\n",
    "\n",
    "try:\n",
    "    tupla_de_tuplas = eval(entrada)\n",
    "    \n",
    "    if all(isinstance(tupla, tuple) and all(isinstance(num, (int, float)) for num in tupla) for tupla in tupla_de_tuplas):\n",
    "        \n",
    "        resultado = calculo_promedios(tupla_de_tuplas)\n",
    "        print(\"Tupla original:\", tupla_de_tuplas)\n",
    "        print(\"Promedio de cada tupla:\", resultado)\n",
    "    else:\n",
    "        print(\"Error: Asegúrate de ingresar una tupla de tuplas con números.\")\n",
    "except:\n",
    "    print(\"Error: Entrada inválida. Asegúrate de usar el formato correcto.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "96c3e829-2b26-4784-ac19-7f969ed22960",
   "metadata": {},
   "source": [
    "Ejercicio # 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "e0068c38-9185-4a54-9f37-2b3b88fa1ffb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese el título del libro:  el libro de la selva\n",
      "Ingrese el autor del libro:  jose jose\n",
      "Ingrese el número de páginas:  345\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descripción del libro:\n",
      "Título: el libro de la selva\n",
      "Autor: jose jose\n",
      "Páginas: 345\n",
      "Estado: no leído\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "\n",
      "¿Ha leído el libro? (s/n):  n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Descripción actualizada del libro:\n",
      "Título: el libro de la selva\n",
      "Autor: jose jose\n",
      "Páginas: 345\n",
      "Estado: no leído\n"
     ]
    }
   ],
   "source": [
    "class Book:\n",
    "    \n",
    "    def __init__(self, titulo, autor, num_paginas):\n",
    "        self.titulo = titulo\n",
    "        self.autor = autor\n",
    "        self.num_paginas = num_paginas\n",
    "        self.leido = False  \n",
    "    \n",
    "   \n",
    "    def marcardo_como_leido(self):\n",
    "        self.leido = True\n",
    "    \n",
    "    \n",
    "    def descripcion(self):\n",
    "        estado = \"leído\" if self.leido else \"no leído\"\n",
    "        return f\"Título: {self.titulo}\\nAutor: {self.autor}\\nPáginas: {self.num_paginas}\\nEstado: {estado}\"\n",
    "\n",
    "\n",
    "def result():\n",
    "    \n",
    "    titulo = input(\"Ingrese el título del libro: \")\n",
    "    autor = input(\"Ingrese el autor del libro: \")\n",
    "    num_paginas = int(input(\"Ingrese el número de páginas: \"))\n",
    "    \n",
    "    \n",
    "    libro = Book(titulo, autor, num_paginas)\n",
    "    \n",
    "    \n",
    "    print(\"\\nDescripción del libro:\")\n",
    "    print(libro.descripcion())\n",
    "    \n",
    "    \n",
    "    respuesta = input(\"\\n¿Ha leído el libro? (s/n): \")\n",
    "    if respuesta.lower() == 's':\n",
    "        libro.marcar_como_leido()\n",
    "    \n",
    "   \n",
    "    print(\"\\nDescripción actualizada del libro:\")\n",
    "    print(libro.descripcion())\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    result()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "644d59ad-586e-4dc3-a3d2-af8ca9ea9ac4",
   "metadata": {},
   "source": [
    "ejercicio #9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b68528be-115e-42b6-934d-9fbc46d24a0d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Ingrese el radio del círculo:  45\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Área del círculo: 6361.73\n",
      "Circunferencia del círculo: 282.74\n"
     ]
    }
   ],
   "source": [
    "import math  # Importar el módulo math para usar pi\n",
    "\n",
    "# Definino la clase Circulo\n",
    "class Circulo:\n",
    "    \n",
    "    def __init__(self, radio):\n",
    "        self.radio = radio\n",
    "\n",
    "    \n",
    "    def area(self):\n",
    "        return math.pi * (self.radio ** 2)\n",
    "\n",
    "    \n",
    "    def circunferencia(self):\n",
    "        return 2 * math.pi * self.radio\n",
    "\n",
    "\n",
    "def result():\n",
    "    \n",
    "    try:\n",
    "        radio = float(input(\"Ingrese el radio del círculo: \"))\n",
    "        if radio < 0:\n",
    "            print(\"El radio no puede ser negativo.\")\n",
    "            return\n",
    "\n",
    "        \n",
    "        circulo = Circulo(radio)\n",
    "\n",
    "      \n",
    "        print(f\"\\nÁrea del círculo: {circulo.area():.2f}\")\n",
    "        print(f\"Circunferencia del círculo: {circulo.circunferencia():.2f}\")\n",
    "\n",
    "    except ValueError:\n",
    "        print(\"Error: Ingrese un valor numérico válido para el radio.\")\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    result()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "79c4d97b-db54-419f-8e41-2ccacff287a1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
